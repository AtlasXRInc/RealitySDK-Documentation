{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to Reality documentation. This is a preview version of the SDK, for a full experience, please wait the final version.</p> <p>Some information may change until the final version. To report issues, please use this link https://github.com/AtlasXRInc/Reality/issues If you need help, feel free to ask on the Beyond discord https://discord.com/invite/Zure49uSKR</p>"},{"location":"API/","title":"API","text":""},{"location":"API/#api","title":"API","text":""},{"location":"API/#game","title":"Game","text":""},{"location":"API/#combat","title":"Combat","text":""},{"location":"Download/","title":"Download","text":""},{"location":"Download/#download","title":"Download","text":"<p>wip</p>"},{"location":"gettingstarted/","title":"Getting started","text":""},{"location":"gettingstarted/#getting-started","title":"Getting started","text":"<ul> <li>Download Unreal engine</li> <li>Download the beginner's project</li> </ul>"},{"location":"Documentation/","title":"Documentation homepage","text":""},{"location":"Documentation/CreateMap/","title":"Test a mod","text":""},{"location":"Documentation/CreateMod/","title":"Create a mod","text":""},{"location":"Documentation/CreateMod/#create-a-mod","title":"Create a mod","text":"<p>You can create many type of mods - GameMode mod Create custom rules for a game - Map mod Create your map and add support to gamemodes you want  </p>"},{"location":"Documentation/CreateMod/#create-a-new-mod","title":"Create a new mod","text":"<ul> <li>Click on <code>Reality &gt; New mod ...</code> </li> <li>Select the type of mod you want to create  </li> </ul> <p>Warning</p> <p>Do not change the name of the generated file. The modsystem will search for this specific name to load mods.</p>"},{"location":"Documentation/CreateMod/#gamemode-mod","title":"GameMode Mod","text":""},{"location":"Documentation/CreateMod/#map-mod","title":"Map Mod","text":"<p>Note</p> <p>Map mods will use Beyond world settings in-game. It's not required to set those settings.</p>"},{"location":"Documentation/GettingStarted/","title":"Getting Started","text":""},{"location":"Documentation/GettingStarted/#installing-realitysdk-and-unreality-engine","title":"Installing RealitySDK and Unreality Engine","text":"<ul> <li>Download RealitySDK.zip from the Unreality Releases page<ul> <li>Move the RealitySDK.zip file to the root of your drive (e.g., C:). \u26a0\ufe0f This prevents long file path issues with Unreal Engine.</li> <li>Right-click the file and select Extract All...</li> </ul> </li> </ul> <p> This will be your root folder for the Unreality Engine</p> <ul> <li>Now download the Unreality Engine (all seven Engine.zip.00X files from the same GitHub releases page).<ul> <li>Place all seven .00X files inside the extracted RealitySDK folder. (\u26a0\ufe0f See picture)</li> <li>Double-click RealitySetup.</li> </ul> </li> </ul> <p></p> <p>This process will extract the Unreality Engine and install the RealitySDK along with all required dependencies.</p> <p>Once the installation is complete, Unreal Engine will prompt a confirmation window \u2014 click Allow to proceed. The engine will then launch automatically.</p> <p>Warning</p> <p>This requires at least 55 GB of free space.</p>"},{"location":"Documentation/GettingStarted/#understanding-unreality-vs-reality","title":"Understanding Unreality vs Reality","text":"<ul> <li>Unreality Engine is Atlas XR and Meta\u2019s fork of Unreal Engine, optimized for VR.   It\u2019s updated rarely and is the base engine you\u2019ll build on.</li> <li>RealitySDK is the modkit.   It\u2019s updated frequently and contains the SDK tools you\u2019ll use when creating mods.</li> </ul>"},{"location":"Documentation/GettingStarted/#setting-up-your-project","title":"Setting Up Your Project","text":""},{"location":"Documentation/GettingStarted/#if-you-dont-have-a-modkit-unreal-project-yet","title":"If You Don\u2019t Have a Modkit Unreal Project Yet","text":"<ol> <li>Open Unreality. It will take few minutes to compile the first time you open it.</li> <li> <p>In the Unreal Project Browser:</p> <ul> <li>Select Blank Project</li> <li>Blueprint project (not C++)</li> <li>Target platform: Mobile</li> <li>Quality Preset: Scalable</li> </ul> </li> <li> <p>Click Create to make a new project.</p> </li> <li> <p>Once the project opens:</p> <ul> <li>From the top ribbon, click Edit \u2192 Plugins.</li> <li>Search for Reality.</li> <li>Click the checkbox to enable it.</li> <li>Restart the editor when prompted.</li> </ul> </li> <li> <p>Replace the config files with the provided Reality config files to match rendering and collision settings.</p> </li> </ol>"},{"location":"Documentation/GettingStarted/#if-you-already-have-a-modkit-project","title":"If You Already Have a Modkit Project","text":"<p>Make sure you are using the correct Unreal version. Right-click your <code>.uproject</code> file \u2192 Switch Unreal Engine version \u2192 select the path to Unreality.</p>"},{"location":"Documentation/GettingStarted/#create-your-first-mod","title":"Create Your First Mod","text":"<p>Once your project is set up:</p> <ol> <li>In the Unreal Editor, open the Reality dropdown (top menu bar).</li> <li>Select New Mod.</li> </ol>"},{"location":"Documentation/Prerequisites/","title":"Prerequisites","text":""},{"location":"Documentation/Prerequisites/#prerequisites","title":"Prerequisites","text":""},{"location":"Documentation/Prerequisites/#unreal-engine","title":"Unreal Engine","text":"<ul> <li>Install Unreal Engine 5.5 https://www.unrealengine.com/fr/download</li> </ul>"},{"location":"Documentation/Prerequisites/#reality-plugin","title":"Reality Plugin","text":"<ul> <li>Download latest Reality plugin https://github.com/AtlasXRInc/Reality/releases </li> <li>Install it to <code>Plugins</code> folder of your project</li> </ul>"},{"location":"Documentation/Prerequisites/#beyond-sandbox-meta-quest-dev-version","title":"Beyond Sandbox Meta Quest Dev Version","text":"<ul> <li>Join the Beyond Sandbox dev channel (by the invite link)</li> <li>Configure the channel on your Meta Quest</li> <li>Open your content Library</li> <li>Locate Beyond Sandbox and press on the \"3 dots\" icon to open the context menu</li> <li>Press \"Settings\" and select \"Beta (Dev)\"</li> </ul>"},{"location":"Documentation/Roadmap/","title":"Roadmaps","text":""},{"location":"Documentation/Roadmap/#roadmaps","title":"Roadmaps","text":""},{"location":"Documentation/Roadmap/#01","title":"0.1","text":"<p>ModSystem </p> <ul> <li> Rewrite from nmod</li> <li> Mod manifests</li> </ul> <p>RealityEditor </p> <ul> <li> Multiplatform toolkit (android, windows)</li> <li> ADB tools</li> <li> Modio integration</li> <li> Mod builder</li> <li> Tasks system</li> <li> UI  </li> </ul> <p>Reality </p> <ul> <li> Game creation UI</li> <li> Mod loading</li> <li> Mods type<ul> <li> GameMode mod</li> <li> Map mod</li> </ul> </li> <li> Final tests  </li> <li> Setup distribution pipeline to modders</li> </ul>"},{"location":"Documentation/Roadmap/#02","title":"0.2","text":"<p>RealityEditor </p> <p>Reality </p> <ul> <li> Object System</li> <li> Modpack System</li> <li> Advanced Game Mode Support</li> <li> Interactable Support</li> <li> Firearms Support</li> <li> SDK API Tests</li> <li> Software Occlusion Culling</li> <li> PCVR Distribution</li> <li> Unreality Distribution</li> <li> Final tests</li> </ul>"},{"location":"Documentation/Roadmap/#03","title":"0.3","text":"<p>RealityEditor </p> <ul> <li> QoL improvement  </li> </ul> <p>Reality </p> <ul> <li> Multiplayer tests</li> <li> Interoperability tests</li> <li> Mods type<ul> <li> Skin mods</li> </ul> </li> <li> SDK API<ul> <li> GameAPI</li> <li> CombatAPI  </li> </ul> </li> </ul>"},{"location":"Documentation/Roadmap/#04","title":"0.4","text":"<p>RealityEditor </p> <ul> <li> Map mods can support external user-created GameMode mods</li> <li> Add in-editor mod search</li> <li> Project templates</li> <li> Documentation  </li> </ul>"},{"location":"Documentation/TestMod/","title":"Test a mod","text":""},{"location":"Documentation/TestMod/#test-a-mod","title":"Test a mod","text":"<p>Note</p> <p>The build / run process will be improved in next versions</p> <p>To test a mod, be sure you are using the dev channel of the game (see prerequisites)</p>"},{"location":"Documentation/TestMod/#cook","title":"Cook","text":"<p>Select <code>Platform &gt; Android &gt; Cook content</code> to cook you mod content</p> <p>For map mods, ensure that <code>List of maps to include in a packaged build</code> in <code>Platforms &gt; packaging settings</code> contains your map, if not add it before cooking.</p>"},{"location":"Documentation/TestMod/#build","title":"Build","text":"<p>Build the plugin using <code>Reality &gt; Build</code> button</p>"},{"location":"Documentation/TestMod/#transfer","title":"Transfer","text":"<p>From the Reality menu, select your device and click <code>Transfer mod</code>. You can check Unreal logs to see if it succeeded.</p>"},{"location":"Documentation/TestMod/#launch-game","title":"Launch game","text":"<p>Launch Beyond and use the game creation UI to select your gamemode and your map then start the game.</p>"},{"location":"Documentation/TestingYourMod/","title":"Testing Your Mod","text":""},{"location":"Documentation/TestingYourMod/#building-testing-your-mod","title":"Building &amp; Testing Your Mod","text":"<p>Your mod is an Unreal Engine plugin. Plugins can live standalone in any Unreal project and be packaged into any game.  </p> <p>For now, you cannot test your plugin in Beyond. You must test it inside a packaged game and run it on your Quest headset.</p>"},{"location":"Documentation/TestingYourMod/#no-vr-preview-in-editor","title":"No VR Preview in Editor","text":"<p>VR Preview testing inside Unreal Editor is not supported. When you're ready to test your mod, you need to:</p> <ol> <li>Build the mod.</li> <li>Install it onto your Quest headset.</li> <li>Launch it from your headset.</li> </ol> <p>There are two main ways to do this:</p> <ul> <li>Local Sideloading (Build + Install directly to headset)  </li> <li>Mod.io Upload (Cloud-based distribution)</li> </ul>"},{"location":"Documentation/TestingYourMod/#building-installing-local-sideload","title":"Building &amp; Installing (Local Sideload)","text":"<p>Do not use the standard Unreal packaging menu. Instead, always use the Reality menu \u2192 Build / Install / Run.</p> <p>Warning</p> <p>You cannot install mods if you're logged into a secondary Meta account. Sideloading only works with the primary (admin) account and requires Dev Mode to be enabled.</p>"},{"location":"Documentation/TestingYourMod/#steps","title":"Steps","text":"<ol> <li>In Unreal Editor, go to the Reality dropdown menu (top menu bar).</li> <li>Make sure the mod you want to build is selected</li> <li> <p>From the Reality menu, choose:</p> <ul> <li>Build \u2192 Builds the mod (cooks assets + runs necessary processes)  </li> <li>Install \u2192 Transfers the built mod to your headset via sideload  </li> <li>Run \u2192 Not functional yet</li> </ul> </li> </ol> <p>Once installed, a standalone game will appear on your headset under \u201cUnknown Sources\u201d.</p>"},{"location":"Documentation/TestingYourMod/#rebuilding-multiple-mods","title":"Rebuilding &amp; Multiple Mods","text":"<ul> <li>To update a mod you\u2019ve already installed, simply Build + Install again.</li> <li>To test another mod, select it and repeat Build + Install.</li> <li>You cannot uninstall mods from the headset manually.</li> <li>To test multiple mods at once, build and install them one by one.</li> </ul>"},{"location":"Documentation/TestingYourMod/#connecting-to-modio-in-editor","title":"Connecting to Mod.io (In Editor)","text":"<p>To use Mod.io in, you need to authenticate your Mod.io account from the editor.</p>"},{"location":"Documentation/TestingYourMod/#1-configure-your-email","title":"1. Configure Your Email","text":"<ul> <li>Open Reality \u2192 Settings.</li> <li>In the Mail field, type the email you want to use with Mod.io.</li> </ul>"},{"location":"Documentation/TestingYourMod/#2-authenticate-get-otp","title":"2. Authenticate &amp; Get OTP","text":"<ul> <li>Go to Reality \u2192 Authenticate.  </li> <li>This will send a One-Time Password (OTP) to your email.</li> </ul> <p>If you don't have a Mod.io account, use this OTP to create one. Then repeat step 2.</p>"},{"location":"Documentation/TestingYourMod/#3-enter-otp-in-settings","title":"3. Enter OTP in Settings","text":"<ul> <li>Go back to Reality \u2192 Settings.</li> <li>Enter the received OTP into the Mail Code field.</li> <li>Then go back to Reality \u2192 Authenticate again.</li> </ul> <p>Once successful:</p> <ul> <li>Restart the editor.</li> <li>The red circle next to Authenticate should turn green, indicating you're signed in.</li> </ul>"},{"location":"Documentation/TestingYourMod/#troubleshooting","title":"Troubleshooting","text":"<p>Warning</p> <p>If you see the following error, it means the OTP was already used.  </p><pre><code>Authentication error: The email security code has already been redeemed.\n</code></pre> To fix it: <ul> <li>Clear the Mail Code field in Reality \u2192 Settings.</li> <li>Click Reality \u2192 Authenticate again to get a new OTP emailed to you.</li> </ul>"},{"location":"Documentation/TestingYourMod/#publishing-mods-to-modio-cloud-distribution","title":"Publishing Mods to Mod.io (Cloud Distribution)","text":"<p>Once you have a standalone game on your headset that was packaged from Reality, you can also distribute and test updates of your mod through Mod.io.  </p> <p>Unlike local sideloading, Mod.io:</p> <ul> <li>Works with secondary Meta accounts</li> <li>Does not require Dev Mode</li> <li>Distributes mods through the cloud</li> </ul> <p>This is especially useful for:</p> <ul> <li>Testing in multiplayer</li> <li>Sharing mods between creators</li> </ul>"},{"location":"Documentation/TestingYourMod/#uploading-your-mod-to-modio","title":"Uploading Your Mod to Mod.io","text":"<ol> <li>Select your mod in the Unreal Editor.  </li> <li>From the mod\u2019s dropdown menu, choose Publish/Update.    This uploads your mod to Mod.io.</li> </ol> <p>Note</p> <p>For now, multiplayer testing requires publishing your mod to Mod.io.</p>"},{"location":"Documentation/TestingYourMod/#sharing-mods-between-creators","title":"Sharing Mods Between Creators","text":"<p>If you want to test your mod with someone else\u2019s mod (e.g., their weapon + your shield), there are two ways:</p> <ol> <li> <p>They can share their content with everyone:</p> <ul> <li>Inside their plugin\u2019s content folder, create a folder called <code>Shared</code>.</li> <li>Place the mod files there for others to access.</li> </ul> </li> <li> <p>They can send you their mod files directly, and you place them into your project.</p> </li> </ol> <p>Warning</p> <p>If you delete the manifest file in Reality &gt; Mods &gt; YourMod you will not be able to update your mod again.</p>"},{"location":"Documentation/Feature/Class/","title":"Class","text":""},{"location":"Documentation/Feature/Class/#class","title":"Class","text":"<p>Coming Soon.</p>"},{"location":"Documentation/Feature/Loadout/","title":"Loadout","text":""},{"location":"Documentation/Feature/Loadout/#loadout","title":"Loadout","text":"<p>Coming Soon.</p>"},{"location":"Documentation/Feature/Overview/","title":"Overview","text":""},{"location":"Documentation/Feature/Overview/#overview","title":"Overview","text":"<p>Coming soon.</p>"},{"location":"Documentation/Gamemode/CreateGamemode/","title":"Create Gamemode","text":""},{"location":"Documentation/Gamemode/CreateGamemode/#create-gamemode","title":"Create Gamemode","text":"<p>Coming soon.</p>"},{"location":"Documentation/Gamemode/Overview/","title":"Overview","text":""},{"location":"Documentation/Gamemode/Overview/#overview","title":"Overview","text":"<p>Coming soon.</p>"},{"location":"Documentation/GettingStarted/Index/","title":"Class","text":""},{"location":"Documentation/Interactable/CreateFirearm/","title":"Create Firearm","text":""},{"location":"Documentation/Interactable/CreateFirearm/#create-firearms","title":"Create Firearms","text":"<p>A Reality Firearm is a specialized child class of Reality Interactable designed specifically for creating firearms in your mods. This class includes all the necessary functionality for handling VR weapon interactions, such as grabbing, aiming, firing, and physical collision. The <code>RealityFirearm</code> class is designed to easily let you make 90% of existing weapons out of the box and is modular enough to set up the remaining 10%.</p>"},{"location":"Documentation/Interactable/CreateFirearm/#creating-a-reality-firearm-actor","title":"Creating a Reality Firearm Actor","text":"<ol> <li>Right-click in the Content Browser.  </li> <li>Select Create Blueprint Class.  </li> <li>Search for Reality Firearm.  </li> <li>Choose it as the parent class for your new blueprint.</li> </ol> <p>Once created, you can customize the firearm\u2019s appearance, behavior, and mechanics by modifying the blueprint.</p>"},{"location":"Documentation/Interactable/CreateFirearm/#grip-auto-registration","title":"Grip Auto-Registration","text":"<p>The <code>RealityFirearm</code> class comes with some grips automatically registered on Begin Play:</p> <ul> <li> <p>Charging Handle Grip \u2192 Registered as an Animated Grip </p> </li> <li> <p>Main Grip \u2192 Registered as an Animated Grip</p> </li> <li> <p>Main Mesh \u2192 Registered as a Procedural Grip</p> </li> </ul> <p>Note</p> <p>Disabling an animated grip inherited from a parent class can be done by setting the bounds of the associated collision volume to zero. For example, this is done for the charging handle in the sawed off double barrel shotgun.</p>"},{"location":"Documentation/Interactable/CreateFirearm/#viewing-example-firearms","title":"Viewing Example Firearms","text":"<p>To explore example Reality Firearm blueprints:</p> <ol> <li>Open the Content Browser.  </li> <li>Click Settings (top right).  </li> <li>Enable Show Engine Content.  </li> <li>In the Engine directory, search for <code>RealityFirearm</code>.</li> </ol> <p>You\u2019ll find example blueprints such as:</p> <ul> <li><code>RealityFirearm_AK47_Example</code> </li> <li><code>RealityFirearmDoubleBarrelSawedOff_Example</code></li> </ul> <p>These are great references to understand weapon setup, components, and functionality.</p>"},{"location":"Documentation/Interactable/CreateFirearm/#placement-in-mod-folder","title":"Placement in Mod Folder","text":"<p>When you create a mod, a folder named <code>ModName Content</code> is automatically generated in the Plugins folder.</p> <p>Make sure your Reality Firearm (and all dependencies i.e meshes, textures, animations) are saved inside this folder, or it will not be packaged with your mod.</p>"},{"location":"Documentation/Interactable/CreateFirearm/#scaling-interactables","title":"Scaling Interactables","text":"<p>Warning</p> <p>Do not scale the Root Component directly. Changing the root component\u2019s scale causes physics issues. (The Root Component is the top component in the Components hierarchy when a Blueprint is open)</p> <p>Instead, use the UE5 Editor tools to adjust the size of your mesh:</p> <ul> <li>Remodel or reimport the mesh at the correct scale.  </li> <li>Alternatively, use the Static Mesh Editor to adjust its import scale.</li> </ul>"},{"location":"Documentation/Interactable/CreateInteractable/","title":"Create Interactable","text":""},{"location":"Documentation/Interactable/CreateInteractable/#creating-a-reality-interactable-actor","title":"Creating a Reality Interactable Actor","text":"<ol> <li>Right-click in the Content Browser.  </li> <li>Select Create Blueprint Class.  </li> <li>Search for Reality Interactable.  </li> <li>Choose it as the parent class for your new blueprint.</li> </ol> <p>Tip</p> <p>Use Reality Interactable for anything that requires physics-based interaction.</p>"},{"location":"Documentation/Interactable/CreateInteractable/#examples-of-what-should-not-be-interactable","title":"Examples of What Should Not Be Interactable","text":"<ul> <li>Decorative props that don\u2019t need physics interaction  </li> <li>Non-physical gameplay elements (e.g., trigger volumes, UI components)</li> </ul>"},{"location":"Documentation/Interactable/CreateInteractable/#converting-an-existing-actor-to-a-reality-interactable","title":"Converting an Existing Actor to a Reality Interactable","text":"<p>If you already have an actor and want to make it interactable:</p> <ol> <li>Open the existing actor\u2019s Blueprint.  </li> <li>In the top ribbon, click Class Settings.  </li> <li>In the Details Panel, set the Parent Class to <code>Reality Interactable</code>.</li> </ol>"},{"location":"Documentation/Interactable/CreateInteractable/#viewing-example-interactables","title":"Viewing Example Interactables","text":"<p>To explore example Reality Interactable blueprints:</p> <ol> <li>Open the Content Browser.  </li> <li>Click Settings (top right).  </li> <li>Enable Show Engine Content.  </li> <li>In the Engine directory, search for <code>RealityInteractable</code>.</li> </ol> <p>You\u2019ll find blueprints such as:</p> <ul> <li><code>RealityInteractable_DoorHandle</code> </li> <li><code>RealityInteractable_Machete</code></li> </ul> <p>These can be great references for setup and best practices.</p>"},{"location":"Documentation/Interactable/CreateInteractable/#placement-in-mod-folder","title":"Placement in Mod Folder","text":"<p>When you create a mod, a folder named <code>ModName Content</code> is automatically generated in the Plugins folder.</p> <p>Make sure your Reality Interactable actor (and all dependencies i.e meshes, textures, animations) are saved inside this folder, or it will not be packaged with your mod.</p>"},{"location":"Documentation/Interactable/CreateInteractable/#scaling-interactables","title":"Scaling Interactables","text":"<p>Warning</p> <p>Do not scale the Root Component directly. Changing the root component\u2019s scale causes physics issues. (The Root Component is the top component in the Components hierarchy when a Blueprint is open)</p> <p>Instead, use the UE5 Editor tools to adjust the size of your mesh:</p> <ul> <li>Remodel or reimport the mesh at the correct scale.  </li> <li>Alternatively, use the Static Mesh Editor to adjust its import scale.</li> </ul>"},{"location":"Documentation/Interactable/Grips/","title":"Grips","text":""},{"location":"Documentation/Interactable/Grips/#gripping-system","title":"Gripping System","text":"<p>There are two types of grips available in the Reality Modkit:</p> <ul> <li>Procedural Grips \u2013 quick to set up, automatically adapt to any shape, but offer limited fine-tuning.  </li> <li>Animated Grips \u2013 allow for precise, hand-animated interactions such as weapon grips, triggers, or special poses.</li> </ul>"},{"location":"Documentation/Interactable/Grips/#procedural-grips","title":"Procedural Grips","text":"<p>Procedural grips adapt dynamically to the shape of the object using its collision. They\u2019re ideal for general props or objects where precise finger placement isn\u2019t required.</p> <ul> <li>Very easy to set up  </li> <li>Works on any shape  </li> <li>No fine-tuning or animation control</li> </ul> <p>All you need to do is define a collision volume that determines where gripping becomes active.</p> <p>Note: Even without procedural gripping set up, the physics system may still let you \u201cpick up\u201d items in a loose way (e.g. wrapping fingers around a gun grip). However, to have the item properly attached to the hand, you must enable procedural gripping. Internally, this uses <code>AttachComponentToComponent</code>.</p>"},{"location":"Documentation/Interactable/Grips/#registering-a-procedural-grip","title":"Registering a Procedural Grip","text":"<p>You do not need to add a <code>RealityGripComponent</code> or set up any special collision volume to register a procedural grip.</p> <p>On Begin Play, call:</p> <ul> <li><code>RegisterGripProcedural</code> <ul> <li>Pass in the mesh you want to grip.  </li> <li>Pass in a struct of grip settings.</li> </ul> </li> </ul>"},{"location":"Documentation/Interactable/Grips/#animated-grips","title":"Animated Grips","text":"<p>Animated grips are used for precise hand interactions \u2014 for example, a pistol grip where the trigger finger moves independently when firing.</p> <p>They rely on playing animations on a special skeletal mesh hand, allowing exact control over finger poses and transitions through blendspaces.</p>"},{"location":"Documentation/Interactable/Grips/#requirements","title":"Requirements","text":"<ul> <li>You must use the provided skeletal mesh: <code>SKM_HandUE5</code>   (This is already the default value for the hand field.)</li> <li>You need to create an animation for the hand.</li> <li>You need to create a blendspace that includes the relevant hand animations.  <ul> <li>This allows smooth finger transitions (e.g. pressing the trigger).</li> </ul> </li> </ul>"},{"location":"Documentation/Interactable/Grips/#setting-up-an-animated-grip","title":"Setting Up an Animated Grip","text":"<ol> <li>Add a <code>RealityGripComponent</code> to your object.  </li> <li>In the details panel, you can set the preview to be the left or right hand.  </li> <li>For each hand, assign the corresponding blendspace.</li> <li>Create a collision volume for this grip.  <ul> <li>The grip will only activate when the user\u2019s hand overlaps this volume and they pull the grip trigger on their controller.</li> </ul> </li> </ol> <p>Each <code>RealityGripComponent</code> represents one grip.</p>"},{"location":"Documentation/Interactable/Grips/#registering-an-animated-grip","title":"Registering an Animated Grip","text":"<p>To register an animated grip, on Begin Play call:</p> <ul> <li><code>RegisterGripAnimation</code> </li> <li>Pass in the RealityGripComponent </li> <li>Pass in the collision volume (used only to detect overlap and activate the grip)  </li> <li>Pass in a struct of grip settings</li> </ul>"},{"location":"Documentation/Interactable/Grips/#animated-grip-behavior","title":"Animated Grip Behavior","text":"<ul> <li>When gripping, the root bone of the hand snaps to the defined grip location.  </li> <li>All finger and hand positioning is driven by the blendspace, not physics.</li> <li>When the controller releases the grip, the animated grip deactivates.</li> </ul>"},{"location":"Documentation/Interactable/Grips/#examples","title":"Examples","text":"<p>To see how grips are set up on different firearms and interactable objects, search for <code>RealityFirearm</code> or <code>RealityInteractable</code> in the Content Browser.  </p> <p>If no results appear, open the Content Browser Settings and enable \u201cShow Engine Content\u201d to make these examples visible.</p>"},{"location":"Documentation/Interactable/Index/","title":"Interactables","text":""},{"location":"Documentation/Interactable/Overview/","title":"Overview","text":""},{"location":"Documentation/Interactable/Overview/#overview","title":"Overview","text":"<p>A Reality Interactable is any physical object that players can interact with through their VR hands \u2014 such as weapons, doors, and other interactive props. This system enables objects to behave physically and deal damage appropriately (e.g., smashing a chair on someone\u2019s head will cause damage).</p>"},{"location":"Documentation/Interactable/SharpArea/","title":"Sharp Area Component","text":""},{"location":"Documentation/Interactable/SharpArea/#sharp-area-component","title":"Sharp Area Component","text":"<p>The Sharp Area Component is a box collider component that enables stabbing and slashing interactions in your project. It can be used to create functional spikes, traps, bayonets, or bladed weapons.</p> <p>You can choose to enable stabbing, slashing, or both \u2014 depending on the behavior you want.</p>"},{"location":"Documentation/Interactable/SharpArea/#adding-a-sharp-area-component-to-a-blueprint","title":"Adding a Sharp Area Component to a Blueprint","text":"<ol> <li>In the Components tab of your Blueprint, click Add.  </li> <li>Search for Reality Sharp Area and select it.  </li> <li>Position the component and align its scale and rotation with the sharp area on the Blueprint you are working with.</li> </ol> <p>Tip: Sometimes you may need more than one Sharp Area Component to accurately simulate your weapon. For example, a katana may use one Sharp Area for the tip (stabbing) and another for the blade (slashing).</p> <p>You can align the stab axis and slash axis either by:</p> <ul> <li>Changing the corresponding variable in the dropdown, or</li> <li>Rotating the entire component in the editor.</li> </ul> <p>Note</p> <p>For complex weapons like a rake, adding a Sharp Area Component to every spike is not recommended, as this may negatively impact performance.</p>"},{"location":"Documentation/Interactable/SharpArea/#variable-reference","title":"Variable Reference","text":"<p>The following tables list all available variables for the Sharp Area Component, separated into Stabbing and Slashing settings.</p>"},{"location":"Documentation/Interactable/SharpArea/#stabbing","title":"Stabbing","text":"Variable Description Can Stab Enables stabbing behavior for this sharp area. Stab Axis Axis aligned with the normal direction of the tip. Position Strength TODO Velocity Strength TODO Minimum Penetration Minimum distance required to count as a valid stab. Maximum Penetration Maximum distance the blade can penetrate. Stab Force Threshold Offset applied to the base stab force threshold. Negative requires less force to stab; positive requires more. Can Be Pushed Deeper Toggle on to allow the blade to be pushed deeper into the wound. When Can Be Pushed Deeper is disabled, the stab depth is calculated on the first collision frame and remains fixed at that depth. When enabled, the blade can continue to be pushed deeper into the target up to the Maximum Penetration distance after the initial stab. Can Twist Enables twisting of the blade after penetration. Twist Limit How far twisting is allowed (in degrees or custom units). Can Swing Whether the blade can swing from this area. Swing Limit How far the blade can swing (in degrees or custom units)."},{"location":"Documentation/Interactable/SharpArea/#slashing","title":"Slashing","text":"Variable Description Can Slash Enables slashing behavior for this sharp area. Slash Force Threshold Offset applied to the base slash force threshold. Negative requires less force to slash; positive requires more. Slash Axis Axis that runs along the blade for slashing direction."},{"location":"Documentation/Interactable/SharpArea/#positioning-notes","title":"Positioning Notes","text":"<ul> <li>It's okay for Sharp Area Components to overlap slightly. Overlaps will not cause any issues in detection or interaction.</li> <li>Make sure each Sharp Area\u2019s scale and axis orientation match the physical shape and intended interaction area of the weapon.</li> </ul>"},{"location":"Documentation/Interactable/SharpArea/#example-machete-setup","title":"Example: Machete Setup","text":"<p>To see a working example of a Sharp Area Component:</p> <ol> <li>Open your Content Browser.</li> <li>In the top right, click Settings \u2192 enable Show Engine Content.</li> <li>In the Engine directory, search for <code>RealityFirearm</code>.</li> <li>Open the Blueprint called <code>RealityInteractable_Machete</code>.</li> </ol> <p>This Blueprint demonstrates how Sharp Area Components are positioned and configured for both stabbing and slashing on a single weapon.</p>"},{"location":"Documentation/Level/CreateLevel/","title":"Create Level","text":""},{"location":"Documentation/Level/CreateLevel/#levels","title":"Levels","text":"<p>Coming Soon.</p>"},{"location":"Documentation/Level/Overview/","title":"Overview","text":""},{"location":"Documentation/Level/Overview/#overview","title":"Overview","text":"<p>Coming soon.</p>"}]}